plugins {
    id 'java-library'
    id 'maven-publish'
    id "com.peterabeles.gversion" version "1.10"
}

configurations {
    api_r8
    api_r8.transitive = false
    implementation.extendsFrom(api_r8)
}

dependencies {
    implementation 'org.ow2.asm:asm:9.5'
    implementation 'com.google.code.findbugs:jsr305:3.0.2'

    api_r8 r8
    api 'it.unimi.dsi:fastutil:8.5.11'
    api 'com.google.guava:guava:31.1-jre'

    testImplementation 'org.ow2.asm:asm-tree:9.5'
    testImplementation 'org.ow2.asm:asm-util:9.5'
    testImplementation 'org.benf:cfr:0.152'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
}

// Force generation for gversion data class
project.compileJava.dependsOn(createVersionFile)
gversion {
    srcDir = "src/generated/java/"
    classPackage = "software.coley.dextranslator"
    className = "DexTranslatorBuildConfig"
    dateFormat = "yyyy MM/dd HH:mm"
    debug = true
    language = "java"
    explicitType = false
    annotate = false
}
sourceSets {
    // Need to add the generated class to the source set
    main {
        java {
            srcDirs 'src/generated/java', 'src/main/java'
        }
    }
}

test {
    useJUnitPlatform()

    systemProperty 'junit.jupiter.execution.parallel.enabled', true
    systemProperty 'junit.jupiter.execution.parallel.mode.default', 'concurrent'
    systemProperty 'junit.jupiter.execution.parallel.config.strategy', 'fixed'
    systemProperty 'junit.jupiter.execution.parallel.config.fixed.parallelism', 3
    systemProperty 'junit.jupiter.execution.parallel.config.fixed.max-pool-size', 3
}

task sourcesJar(type: Jar) {
    duplicatesStrategy = 'include'
    classifier = 'sources'
    from sourceSets.main.allSource
}

java {
    withSourcesJar()
}

// Configure publishing for generation of 'pom.xml'
publishing {
    publications {
        maven(MavenPublication) {
            groupId = project.group
            version = project.version
            artifactId = 'dex-translator'
            from components.java
        }
    }
}

// Hack to generate POM files for the output.
tasks.named('generatePomFileForMavenPublication').configure {
    destination = project.file('build/classes/java/main/META-INF/maven/software.coley/dex-translator/pom.xml')
    def properties = project.file('build/classes/java/main/META-INF/maven/software.coley/dex-translator/pom.properties')

    // Hack to also generate the pom-properties file.
    doLast {
        List<String> lines = [
                "# Generated",
                "groupId=software.coley",
                "artifactId=dex-translator",
                "version=${project.version}"
        ] as String[]
        properties.text = lines.join('\n')
    }
}

// Make it so that jar-generating tasks requires generating POM files first.
jar {
    dependsOn(tasks.named('generatePomFileForMavenPublication'))

    // Also bundle R8 into our artifact
    from {
        configurations.api_r8.collect { it.isDirectory() ? it : zipTree(it) }
    }
}